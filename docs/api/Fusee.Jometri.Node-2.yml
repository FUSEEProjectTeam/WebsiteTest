### YamlMime:ManagedReference
items:
- uid: Fusee.Jometri.Node`2
  commentId: T:Fusee.Jometri.Node`2
  id: Node`2
  parent: Fusee.Jometri
  children:
  - Fusee.Jometri.Node`2.#ctor(`0,`1)
  - Fusee.Jometri.Node`2.Key
  - Fusee.Jometri.Node`2.LeftNode
  - Fusee.Jometri.Node`2.RightNode
  - Fusee.Jometri.Node`2.Value
  langs:
  - csharp
  - vb
  name: Node<TK, TV>
  nameWithType: Node<TK, TV>
  fullName: Fusee.Jometri.Node<TK, TV>
  type: Class
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Jometri/BinarySearchTree.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Node
    path: src/Fusee/src/Jometri/BinarySearchTree.cs
    startLine: 11
  assemblies:
  - Fusee.Jometri
  namespace: Fusee.Jometri
  summary: "\nRepresents a node in a (binary) tree.\n"
  example: []
  syntax:
    content: public class Node<TK, TV>
    typeParameters:
    - id: TK
      description: The key of the node as generic type.
    - id: TV
      description: The payload of the node as generic type.
    content.vb: Public Class Node(Of TK, TV)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Node(Of TK, TV)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Fusee.Jometri.Node(Of TK, TV)
  name.vb: Node(Of TK, TV)
- uid: Fusee.Jometri.Node`2.Key
  commentId: P:Fusee.Jometri.Node`2.Key
  id: Key
  parent: Fusee.Jometri.Node`2
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: Node<TK, TV>.Key
  fullName: Fusee.Jometri.Node<TK, TV>.Key
  type: Property
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Jometri/BinarySearchTree.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Key
    path: src/Fusee/src/Jometri/BinarySearchTree.cs
    startLine: 17
  assemblies:
  - Fusee.Jometri
  namespace: Fusee.Jometri
  summary: "\nThe key of the node - determines how a node is sorted into the tree.\n"
  example: []
  syntax:
    content: public TK Key { get; set; }
    parameters: []
    return:
      type: '{TK}'
    content.vb: Public Property Key As TK
  overload: Fusee.Jometri.Node`2.Key*
  nameWithType.vb: Node(Of TK, TV).Key
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Fusee.Jometri.Node(Of TK, TV).Key
- uid: Fusee.Jometri.Node`2.Value
  commentId: P:Fusee.Jometri.Node`2.Value
  id: Value
  parent: Fusee.Jometri.Node`2
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Node<TK, TV>.Value
  fullName: Fusee.Jometri.Node<TK, TV>.Value
  type: Property
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Jometri/BinarySearchTree.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Value
    path: src/Fusee/src/Jometri/BinarySearchTree.cs
    startLine: 22
  assemblies:
  - Fusee.Jometri
  namespace: Fusee.Jometri
  summary: "\nThe payload of the node.\n"
  example: []
  syntax:
    content: public TV Value { get; set; }
    parameters: []
    return:
      type: '{TV}'
    content.vb: Public Property Value As TV
  overload: Fusee.Jometri.Node`2.Value*
  nameWithType.vb: Node(Of TK, TV).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Fusee.Jometri.Node(Of TK, TV).Value
- uid: Fusee.Jometri.Node`2.LeftNode
  commentId: F:Fusee.Jometri.Node`2.LeftNode
  id: LeftNode
  parent: Fusee.Jometri.Node`2
  langs:
  - csharp
  - vb
  name: LeftNode
  nameWithType: Node<TK, TV>.LeftNode
  fullName: Fusee.Jometri.Node<TK, TV>.LeftNode
  type: Field
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Jometri/BinarySearchTree.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: LeftNode
    path: src/Fusee/src/Jometri/BinarySearchTree.cs
    startLine: 27
  assemblies:
  - Fusee.Jometri
  namespace: Fusee.Jometri
  summary: "\nAn item with lower value than the value of this node will become a LeftNode.\n"
  example: []
  syntax:
    content: public Node<TK, TV> LeftNode
    return:
      type: Fusee.Jometri.Node`2
    content.vb: Public LeftNode As Node(Of TK, TV)
  nameWithType.vb: Node(Of TK, TV).LeftNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fusee.Jometri.Node(Of TK, TV).LeftNode
- uid: Fusee.Jometri.Node`2.RightNode
  commentId: F:Fusee.Jometri.Node`2.RightNode
  id: RightNode
  parent: Fusee.Jometri.Node`2
  langs:
  - csharp
  - vb
  name: RightNode
  nameWithType: Node<TK, TV>.RightNode
  fullName: Fusee.Jometri.Node<TK, TV>.RightNode
  type: Field
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Jometri/BinarySearchTree.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: RightNode
    path: src/Fusee/src/Jometri/BinarySearchTree.cs
    startLine: 31
  assemblies:
  - Fusee.Jometri
  namespace: Fusee.Jometri
  summary: "\nAn item with higher value than the value of this node will become a RightNode.\n"
  example: []
  syntax:
    content: public Node<TK, TV> RightNode
    return:
      type: Fusee.Jometri.Node`2
    content.vb: Public RightNode As Node(Of TK, TV)
  nameWithType.vb: Node(Of TK, TV).RightNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fusee.Jometri.Node(Of TK, TV).RightNode
- uid: Fusee.Jometri.Node`2.#ctor(`0,`1)
  commentId: M:Fusee.Jometri.Node`2.#ctor(`0,`1)
  id: '#ctor(`0,`1)'
  parent: Fusee.Jometri.Node`2
  langs:
  - csharp
  - vb
  name: Node(TK, TV)
  nameWithType: Node<TK, TV>.Node(TK, TV)
  fullName: Fusee.Jometri.Node<TK, TV>.Node(TK, TV)
  type: Constructor
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Jometri/BinarySearchTree.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: .ctor
    path: src/Fusee/src/Jometri/BinarySearchTree.cs
    startLine: 38
  assemblies:
  - Fusee.Jometri
  namespace: Fusee.Jometri
  summary: "\nConstructor, creates a new node.\n"
  example: []
  syntax:
    content: public Node(TK key, TV value)
    parameters:
    - id: key
      type: '{TK}'
      description: The key of the new node.
    - id: value
      type: '{TV}'
      description: Payload of the new node.
    content.vb: Public Sub New(key As TK, value As TV)
  overload: Fusee.Jometri.Node`2.#ctor*
  nameWithType.vb: Node(Of TK, TV).Node(TK, TV)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Fusee.Jometri.Node(Of TK, TV).Node(TK, TV)
references:
- uid: Fusee.Jometri
  commentId: N:Fusee.Jometri
  name: Fusee.Jometri
  nameWithType: Fusee.Jometri
  fullName: Fusee.Jometri
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fusee.Jometri.Node`2.Key*
  commentId: Overload:Fusee.Jometri.Node`2.Key
  name: Key
  nameWithType: Node<TK, TV>.Key
  fullName: Fusee.Jometri.Node<TK, TV>.Key
  nameWithType.vb: Node(Of TK, TV).Key
  fullName.vb: Fusee.Jometri.Node(Of TK, TV).Key
- uid: '{TK}'
  commentId: '!:TK'
  definition: TK
  name: TK
  nameWithType: TK
  fullName: TK
- uid: TK
  name: TK
  nameWithType: TK
  fullName: TK
- uid: Fusee.Jometri.Node`2.Value*
  commentId: Overload:Fusee.Jometri.Node`2.Value
  name: Value
  nameWithType: Node<TK, TV>.Value
  fullName: Fusee.Jometri.Node<TK, TV>.Value
  nameWithType.vb: Node(Of TK, TV).Value
  fullName.vb: Fusee.Jometri.Node(Of TK, TV).Value
- uid: '{TV}'
  commentId: '!:TV'
  definition: TV
  name: TV
  nameWithType: TV
  fullName: TV
- uid: TV
  name: TV
  nameWithType: TV
  fullName: TV
- uid: Fusee.Jometri.Node`2
  commentId: T:Fusee.Jometri.Node`2
  parent: Fusee.Jometri
  name: Node<TK, TV>
  nameWithType: Node<TK, TV>
  fullName: Fusee.Jometri.Node<TK, TV>
  nameWithType.vb: Node(Of TK, TV)
  fullName.vb: Fusee.Jometri.Node(Of TK, TV)
  name.vb: Node(Of TK, TV)
  spec.csharp:
  - uid: Fusee.Jometri.Node`2
    name: Node
    nameWithType: Node
    fullName: Fusee.Jometri.Node
  - name: <
    nameWithType: <
    fullName: <
  - name: TK
    nameWithType: TK
    fullName: TK
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Fusee.Jometri.Node`2
    name: Node
    nameWithType: Node
    fullName: Fusee.Jometri.Node
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TK
    nameWithType: TK
    fullName: TK
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TV
    nameWithType: TV
    fullName: TV
  - name: )
    nameWithType: )
    fullName: )
- uid: Fusee.Jometri.Node`2.#ctor*
  commentId: Overload:Fusee.Jometri.Node`2.#ctor
  name: Node
  nameWithType: Node<TK, TV>.Node
  fullName: Fusee.Jometri.Node<TK, TV>.Node
  nameWithType.vb: Node(Of TK, TV).Node
  fullName.vb: Fusee.Jometri.Node(Of TK, TV).Node
