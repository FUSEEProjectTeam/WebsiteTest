### YamlMime:ManagedReference
items:
- uid: Fusee.Xene.ViseratorExtensions
  commentId: T:Fusee.Xene.ViseratorExtensions
  id: ViseratorExtensions
  parent: Fusee.Xene
  children:
  - Fusee.Xene.ViseratorExtensions.Viserate``4(``2)
  - Fusee.Xene.ViseratorExtensions.Viserate``4(System.Collections.Generic.IEnumerable{``2})
  langs:
  - csharp
  - vb
  name: ViseratorExtensions
  nameWithType: ViseratorExtensions
  fullName: Fusee.Xene.ViseratorExtensions
  type: Class
  source:
    id: ViseratorExtensions
    path: C:\Users\test\Documents\fusee\Fusee\src\Xene\Viserator.cs
    startLine: 8
  assemblies:
  - Fusee.Xene
  namespace: Fusee.Xene
  summary: "\nContains extensions methods to perform <xref href=\"Fusee.Xene.Viserator%604\" data-throw-if-not-resolved=\"false\"></xref> actions on trees of scene nodes.\n"
  example: []
  syntax:
    content: public static class ViseratorExtensions
    content.vb: Public Module ViseratorExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Fusee.Xene.ViseratorExtensions.Viserate``4(``2)
  commentId: M:Fusee.Xene.ViseratorExtensions.Viserate``4(``2)
  id: Viserate``4(``2)
  isExtensionMethod: true
  parent: Fusee.Xene.ViseratorExtensions
  langs:
  - csharp
  - vb
  name: Viserate<TViserator, TResult, TNode, TComponent>(TNode)
  nameWithType: ViseratorExtensions.Viserate<TViserator, TResult, TNode, TComponent>(TNode)
  fullName: Fusee.Xene.ViseratorExtensions.Viserate<TViserator, TResult, TNode, TComponent>(TNode)
  type: Method
  source:
    id: Viserate
    path: C:\Users\test\Documents\fusee\Fusee\src\Xene\Viserator.cs
    startLine: 37
  assemblies:
  - Fusee.Xene
  namespace: Fusee.Xene
  summary: Performs a <xref href="Fusee.Xene.Viserator%604" data-throw-if-not-resolved="false"></xref> action on the specified tree.
  example: []
  syntax:
    content: >-
      public static IEnumerable<TResult> Viserate<TViserator, TResult, TNode, TComponent>(this TNode root)

          where TViserator : ViseratorBase<TResult, TNode, TComponent>, new()

          where TNode : class, INode where TComponent : class, IComponent
    parameters:
    - id: root
      type: '{TNode}'
      description: The root where to start the traversal.
    typeParameters:
    - id: TViserator
      description: The type of the viserator.
    - id: TResult
      description: The type of the elements resulting from the Viserate traversal.
    - id: TNode
      description: The root type of nodes the tree (given by root) is built from.
    - id: TComponent
      description: The root type of components used in the given tree.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: All items yielded from within the traversal (<xref href="Fusee.Xene.ViseratorBase%603.YieldItem(%600)" data-throw-if-not-resolved="false"></xref>).
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Viserate(Of TViserator As {ViseratorBase(Of TResult, TNode, TComponent), New}, TResult, TNode As {Class, INode}, TComponent As {Class, IComponent})(root As TNode) As IEnumerable(Of TResult)
  overload: Fusee.Xene.ViseratorExtensions.Viserate*
  nameWithType.vb: ViseratorExtensions.Viserate(Of TViserator, TResult, TNode, TComponent)(TNode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Fusee.Xene.ViseratorExtensions.Viserate(Of TViserator, TResult, TNode, TComponent)(TNode)
  name.vb: Viserate(Of TViserator, TResult, TNode, TComponent)(TNode)
- uid: Fusee.Xene.ViseratorExtensions.Viserate``4(System.Collections.Generic.IEnumerable{``2})
  commentId: M:Fusee.Xene.ViseratorExtensions.Viserate``4(System.Collections.Generic.IEnumerable{``2})
  id: Viserate``4(System.Collections.Generic.IEnumerable{``2})
  isExtensionMethod: true
  parent: Fusee.Xene.ViseratorExtensions
  langs:
  - csharp
  - vb
  name: Viserate<TViserator, TResult, TNode, TComponent>(IEnumerable<TNode>)
  nameWithType: ViseratorExtensions.Viserate<TViserator, TResult, TNode, TComponent>(IEnumerable<TNode>)
  fullName: Fusee.Xene.ViseratorExtensions.Viserate<TViserator, TResult, TNode, TComponent>(System.Collections.Generic.IEnumerable<TNode>)
  type: Method
  source:
    id: Viserate
    path: C:\Users\test\Documents\fusee\Fusee\src\Xene\Viserator.cs
    startLine: 54
  assemblies:
  - Fusee.Xene
  namespace: Fusee.Xene
  summary: "\nPerforms a <xref href=\"Fusee.Xene.Viserator%604\" data-throw-if-not-resolved=\"false\"></xref> action on the specified list of trees.\n"
  example: []
  syntax:
    content: >-
      public static IEnumerable<TResult> Viserate<TViserator, TResult, TNode, TComponent>(this IEnumerable<TNode> rootList)

          where TViserator : ViseratorBase<TResult, TNode, TComponent>, new()

          where TNode : class, INode where TComponent : class, IComponent
    parameters:
    - id: rootList
      type: System.Collections.Generic.IEnumerable{{TNode}}
      description: The list of root items where to start the traversal with.
    typeParameters:
    - id: TViserator
      description: The type of the viserator.
    - id: TResult
      description: The type of the elements resulting from the Viserate traversal.
    - id: TNode
      description: The root type of nodes the tree (given by root) is built from.
    - id: TComponent
      description: The root type of components used in the given tree.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: All items yielded from within the traversal (see <xref href="Fusee.Xene.ViseratorBase%603.YieldItem(%600)" data-throw-if-not-resolved="false"></xref>).
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Viserate(Of TViserator As {ViseratorBase(Of TResult, TNode, TComponent), New}, TResult, TNode As {Class, INode}, TComponent As {Class, IComponent})(rootList As IEnumerable(Of TNode)) As IEnumerable(Of TResult)
  overload: Fusee.Xene.ViseratorExtensions.Viserate*
  nameWithType.vb: ViseratorExtensions.Viserate(Of TViserator, TResult, TNode, TComponent)(IEnumerable(Of TNode))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Fusee.Xene.ViseratorExtensions.Viserate(Of TViserator, TResult, TNode, TComponent)(System.Collections.Generic.IEnumerable(Of TNode))
  name.vb: Viserate(Of TViserator, TResult, TNode, TComponent)(IEnumerable(Of TNode))
references:
- uid: Fusee.Xene.Viserator`4
  commentId: T:Fusee.Xene.Viserator`4
  name: Viserator<TItem, TState, TNode, TComponent>
  nameWithType: Viserator<TItem, TState, TNode, TComponent>
  fullName: Fusee.Xene.Viserator<TItem, TState, TNode, TComponent>
  nameWithType.vb: Viserator(Of TItem, TState, TNode, TComponent)
  fullName.vb: Fusee.Xene.Viserator(Of TItem, TState, TNode, TComponent)
  name.vb: Viserator(Of TItem, TState, TNode, TComponent)
  spec.csharp:
  - uid: Fusee.Xene.Viserator`4
    name: Viserator
    nameWithType: Viserator
    fullName: Fusee.Xene.Viserator
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TComponent
    nameWithType: TComponent
    fullName: TComponent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Fusee.Xene.Viserator`4
    name: Viserator
    nameWithType: Viserator
    fullName: Fusee.Xene.Viserator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TState
    nameWithType: TState
    fullName: TState
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TComponent
    nameWithType: TComponent
    fullName: TComponent
  - name: )
    nameWithType: )
    fullName: )
- uid: Fusee.Xene
  commentId: N:Fusee.Xene
  name: Fusee.Xene
  nameWithType: Fusee.Xene
  fullName: Fusee.Xene
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fusee.Xene.ViseratorBase`3.YieldItem(`0)
  commentId: M:Fusee.Xene.ViseratorBase`3.YieldItem(`0)
  name: YieldItem(TItem)
  nameWithType: ViseratorBase<TItem, TNode, TComponent>.YieldItem(TItem)
  fullName: Fusee.Xene.ViseratorBase<TItem, TNode, TComponent>.YieldItem(TItem)
  nameWithType.vb: ViseratorBase(Of TItem, TNode, TComponent).YieldItem(TItem)
  fullName.vb: Fusee.Xene.ViseratorBase(Of TItem, TNode, TComponent).YieldItem(TItem)
  spec.csharp:
  - uid: Fusee.Xene.ViseratorBase`3.YieldItem(`0)
    name: YieldItem
    nameWithType: ViseratorBase<TItem, TNode, TComponent>.YieldItem
    fullName: Fusee.Xene.ViseratorBase<TItem, TNode, TComponent>.YieldItem
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Fusee.Xene.ViseratorBase`3.YieldItem(`0)
    name: YieldItem
    nameWithType: ViseratorBase(Of TItem, TNode, TComponent).YieldItem
    fullName: Fusee.Xene.ViseratorBase(Of TItem, TNode, TComponent).YieldItem
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Fusee.Xene.ViseratorExtensions.Viserate*
  commentId: Overload:Fusee.Xene.ViseratorExtensions.Viserate
  name: Viserate
  nameWithType: ViseratorExtensions.Viserate
  fullName: Fusee.Xene.ViseratorExtensions.Viserate
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResult>
  nameWithType: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  nameWithType.vb: IEnumerable(Of TResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{{TNode}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TNode>
  nameWithType: IEnumerable<TNode>
  fullName: System.Collections.Generic.IEnumerable<TNode>
  nameWithType.vb: IEnumerable(Of TNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TNode)
  name.vb: IEnumerable(Of TNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
