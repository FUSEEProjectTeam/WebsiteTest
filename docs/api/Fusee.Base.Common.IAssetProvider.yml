### YamlMime:ManagedReference
items:
- uid: Fusee.Base.Common.IAssetProvider
  commentId: T:Fusee.Base.Common.IAssetProvider
  id: IAssetProvider
  parent: Fusee.Base.Common
  children:
  - Fusee.Base.Common.IAssetProvider.BeginGetAsset(System.String,Fusee.Base.Common.GetCallback)
  - Fusee.Base.Common.IAssetProvider.CanGet(System.String,System.Type)
  - Fusee.Base.Common.IAssetProvider.CanGetAsync(System.String,System.Type)
  - Fusee.Base.Common.IAssetProvider.CanHandleType(System.Type)
  - Fusee.Base.Common.IAssetProvider.GetAsset(System.String,System.Type)
  - Fusee.Base.Common.IAssetProvider.GetAssetAsync(System.String,System.Type)
  - Fusee.Base.Common.IAssetProvider.RegisterTypeHandler(Fusee.Base.Common.AssetHandler)
  langs:
  - csharp
  - vb
  name: IAssetProvider
  nameWithType: IAssetProvider
  fullName: Fusee.Base.Common.IAssetProvider
  type: Interface
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/IAssetProvider.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: IAssetProvider
    path: src/Fusee/src/Base/Common/IAssetProvider.cs
    startLine: 98
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nAn AssetProvider knows how to acquire assets of certain types from a certain kind of storage.\n"
  remarks: "\nIn a normal world, a good design would separate the many aspects of asset acquisition (storage,\nserialization, codec, asynchronicity). Unfortunately, in JavaScript-Land, it&apos;s all mixed (or should I say messed) up.\nYou tell the JavaScript API &quot;get me an image&quot; and JavaScript magically loads the raw image \ndata, converts it to a two-dimensional pixel array and calls a user-provided callback when its all done. \nNo way to replace a single step by something self-provided. \nSo this is FUSEE&apos;s pitiful approach for an asset acquisition abstraction which is capable of \nbeing implemented by poorly designed JavaScript APIs.\n"
  example: []
  syntax:
    content: public interface IAssetProvider
    content.vb: Public Interface IAssetProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Fusee.Base.Common.IAssetProvider.CanHandleType(System.Type)
  commentId: M:Fusee.Base.Common.IAssetProvider.CanHandleType(System.Type)
  id: CanHandleType(System.Type)
  parent: Fusee.Base.Common.IAssetProvider
  langs:
  - csharp
  - vb
  name: CanHandleType(Type)
  nameWithType: IAssetProvider.CanHandleType(Type)
  fullName: Fusee.Base.Common.IAssetProvider.CanHandleType(System.Type)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/IAssetProvider.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: CanHandleType
    path: src/Fusee/src/Base/Common/IAssetProvider.cs
    startLine: 105
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nDetermines whether this instance can handle assets of the specified type (in general).\n"
  example: []
  syntax:
    content: bool CanHandleType(Type type)
    parameters:
    - id: type
      type: System.Type
      description: The asset type  in question (such as typeof(ImageDate, Font, Sound, ...)).
    return:
      type: System.Boolean
      description: true if this instance can handle the specified type. false otherwise.
    content.vb: Function CanHandleType(type As Type) As Boolean
  overload: Fusee.Base.Common.IAssetProvider.CanHandleType*
- uid: Fusee.Base.Common.IAssetProvider.GetAsset(System.String,System.Type)
  commentId: M:Fusee.Base.Common.IAssetProvider.GetAsset(System.String,System.Type)
  id: GetAsset(System.String,System.Type)
  parent: Fusee.Base.Common.IAssetProvider
  langs:
  - csharp
  - vb
  name: GetAsset(String, Type)
  nameWithType: IAssetProvider.GetAsset(String, Type)
  fullName: Fusee.Base.Common.IAssetProvider.GetAsset(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/IAssetProvider.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: GetAsset
    path: src/Fusee/src/Base/Common/IAssetProvider.cs
    startLine: 113
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nRetrieves the asset identified by the given string.\n"
  example: []
  syntax:
    content: object GetAsset(string id, Type type)
    parameters:
    - id: id
      type: System.String
      description: The identifier string.
    - id: type
      type: System.Type
      description: The type of the asset.
    return:
      type: System.Object
      description: The asset, if this provider can acquire an asset with the given id and the given type. Otherwise null.
    content.vb: Function GetAsset(id As String, type As Type) As Object
  overload: Fusee.Base.Common.IAssetProvider.GetAsset*
- uid: Fusee.Base.Common.IAssetProvider.GetAssetAsync(System.String,System.Type)
  commentId: M:Fusee.Base.Common.IAssetProvider.GetAssetAsync(System.String,System.Type)
  id: GetAssetAsync(System.String,System.Type)
  parent: Fusee.Base.Common.IAssetProvider
  langs:
  - csharp
  - vb
  name: GetAssetAsync(String, Type)
  nameWithType: IAssetProvider.GetAssetAsync(String, Type)
  fullName: Fusee.Base.Common.IAssetProvider.GetAssetAsync(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/IAssetProvider.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: GetAssetAsync
    path: src/Fusee/src/Base/Common/IAssetProvider.cs
    startLine: 121
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nRetrieves the asset identified by the given string in async.\n"
  example: []
  syntax:
    content: Task<object> GetAssetAsync(string id, Type type)
    parameters:
    - id: id
      type: System.String
      description: The identifier string.
    - id: type
      type: System.Type
      description: The type of the asset.
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: The asset, if this provider can acquire an asset with the given id and the given type. Otherwise null.
    content.vb: Function GetAssetAsync(id As String, type As Type) As Task(Of Object)
  overload: Fusee.Base.Common.IAssetProvider.GetAssetAsync*
- uid: Fusee.Base.Common.IAssetProvider.CanGet(System.String,System.Type)
  commentId: M:Fusee.Base.Common.IAssetProvider.CanGet(System.String,System.Type)
  id: CanGet(System.String,System.Type)
  parent: Fusee.Base.Common.IAssetProvider
  langs:
  - csharp
  - vb
  name: CanGet(String, Type)
  nameWithType: IAssetProvider.CanGet(String, Type)
  fullName: Fusee.Base.Common.IAssetProvider.CanGet(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/IAssetProvider.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: CanGet
    path: src/Fusee/src/Base/Common/IAssetProvider.cs
    startLine: 131
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nDetermines whether this asset provider can get the specified asset without actually getting it.\n"
  example: []
  syntax:
    content: bool CanGet(string id, Type type)
    parameters:
    - id: id
      type: System.String
      description: The identifier string.
    - id: type
      type: System.Type
      description: The expected type of the asset.
    return:
      type: System.Boolean
      description: "\ntrue if this asset will produce a result. Otherwise false.\n"
    content.vb: Function CanGet(id As String, type As Type) As Boolean
  overload: Fusee.Base.Common.IAssetProvider.CanGet*
- uid: Fusee.Base.Common.IAssetProvider.CanGetAsync(System.String,System.Type)
  commentId: M:Fusee.Base.Common.IAssetProvider.CanGetAsync(System.String,System.Type)
  id: CanGetAsync(System.String,System.Type)
  parent: Fusee.Base.Common.IAssetProvider
  langs:
  - csharp
  - vb
  name: CanGetAsync(String, Type)
  nameWithType: IAssetProvider.CanGetAsync(String, Type)
  fullName: Fusee.Base.Common.IAssetProvider.CanGetAsync(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/IAssetProvider.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: CanGetAsync
    path: src/Fusee/src/Base/Common/IAssetProvider.cs
    startLine: 141
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nDetermines whether this asset provider can get the specified asset without actually getting it.\n"
  example: []
  syntax:
    content: Task<bool> CanGetAsync(string id, Type type)
    parameters:
    - id: id
      type: System.String
      description: The identifier string.
    - id: type
      type: System.Type
      description: The expected type of the asset.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\ntrue if this asset will produce a result. Otherwise false.\n"
    content.vb: Function CanGetAsync(id As String, type As Type) As Task(Of Boolean)
  overload: Fusee.Base.Common.IAssetProvider.CanGetAsync*
- uid: Fusee.Base.Common.IAssetProvider.BeginGetAsset(System.String,Fusee.Base.Common.GetCallback)
  commentId: M:Fusee.Base.Common.IAssetProvider.BeginGetAsset(System.String,Fusee.Base.Common.GetCallback)
  id: BeginGetAsset(System.String,Fusee.Base.Common.GetCallback)
  parent: Fusee.Base.Common.IAssetProvider
  langs:
  - csharp
  - vb
  name: BeginGetAsset(String, GetCallback)
  nameWithType: IAssetProvider.BeginGetAsset(String, GetCallback)
  fullName: Fusee.Base.Common.IAssetProvider.BeginGetAsset(System.String, Fusee.Base.Common.GetCallback)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/IAssetProvider.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: BeginGetAsset
    path: src/Fusee/src/Base/Common/IAssetProvider.cs
    startLine: 157
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nAsynchronous get method. \n"
  remarks: "\nThe design doesn&apos;t follow any of the standard .NET asynchronous patterns like APM, EAP, or TAP.\nIt&apos;s close to JavaScript where you just provide an &quot;onLoad&quot; decoder that&apos;s called when the object\nis retrieved and decoded. This is to enable AssetProviders to be implemented using standard \nJavaScript DOM objects like Image. See the article\n<a href=\"https://msdn.microsoft.com/en-us/library/hh873178(v=vs.110).aspx\">Interop with Other Asynchronous Patterns and Types</a>\nto get an idea how to map this pattern, which is similar to APM (albeit simpler), to the currently en-vogue TAP (async/await) pattern.\n"
  example: []
  syntax:
    content: void BeginGetAsset(string id, GetCallback getCallback)
    parameters:
    - id: id
      type: System.String
      description: The identifier string.
    - id: getCallback
      type: Fusee.Base.Common.GetCallback
      description: Code to call when the loading is done.
    content.vb: Sub BeginGetAsset(id As String, getCallback As GetCallback)
  overload: Fusee.Base.Common.IAssetProvider.BeginGetAsset*
- uid: Fusee.Base.Common.IAssetProvider.RegisterTypeHandler(Fusee.Base.Common.AssetHandler)
  commentId: M:Fusee.Base.Common.IAssetProvider.RegisterTypeHandler(Fusee.Base.Common.AssetHandler)
  id: RegisterTypeHandler(Fusee.Base.Common.AssetHandler)
  parent: Fusee.Base.Common.IAssetProvider
  langs:
  - csharp
  - vb
  name: RegisterTypeHandler(AssetHandler)
  nameWithType: IAssetProvider.RegisterTypeHandler(AssetHandler)
  fullName: Fusee.Base.Common.IAssetProvider.RegisterTypeHandler(Fusee.Base.Common.AssetHandler)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/IAssetProvider.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: RegisterTypeHandler
    path: src/Fusee/src/Base/Common/IAssetProvider.cs
    startLine: 168
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nRegisters the given asset type decoder.\n"
  remarks: "\nThis method is rather for internal purposes. While an asset provider typically implements access to\na given kind of asset storage, sometimes its hard to implement asset type handlers (decoders) capable of handling\na certain type without knowing much about the contents (like images, etc).\n"
  example: []
  syntax:
    content: void RegisterTypeHandler(AssetHandler handler)
    parameters:
    - id: handler
      type: Fusee.Base.Common.AssetHandler
      description: The handler.
    content.vb: Sub RegisterTypeHandler(handler As AssetHandler)
  overload: Fusee.Base.Common.IAssetProvider.RegisterTypeHandler*
references:
- uid: Fusee.Base.Common
  commentId: N:Fusee.Base.Common
  name: Fusee.Base.Common
  nameWithType: Fusee.Base.Common
  fullName: Fusee.Base.Common
- uid: Fusee.Base.Common.IAssetProvider.CanHandleType*
  commentId: Overload:Fusee.Base.Common.IAssetProvider.CanHandleType
  name: CanHandleType
  nameWithType: IAssetProvider.CanHandleType
  fullName: Fusee.Base.Common.IAssetProvider.CanHandleType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fusee.Base.Common.IAssetProvider.GetAsset*
  commentId: Overload:Fusee.Base.Common.IAssetProvider.GetAsset
  name: GetAsset
  nameWithType: IAssetProvider.GetAsset
  fullName: Fusee.Base.Common.IAssetProvider.GetAsset
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Fusee.Base.Common.IAssetProvider.GetAssetAsync*
  commentId: Overload:Fusee.Base.Common.IAssetProvider.GetAssetAsync
  name: GetAssetAsync
  nameWithType: IAssetProvider.GetAssetAsync
  fullName: Fusee.Base.Common.IAssetProvider.GetAssetAsync
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullName.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Fusee.Base.Common.IAssetProvider.CanGet*
  commentId: Overload:Fusee.Base.Common.IAssetProvider.CanGet
  name: CanGet
  nameWithType: IAssetProvider.CanGet
  fullName: Fusee.Base.Common.IAssetProvider.CanGet
- uid: Fusee.Base.Common.IAssetProvider.CanGetAsync*
  commentId: Overload:Fusee.Base.Common.IAssetProvider.CanGetAsync
  name: CanGetAsync
  nameWithType: IAssetProvider.CanGetAsync
  fullName: Fusee.Base.Common.IAssetProvider.CanGetAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Fusee.Base.Common.IAssetProvider.BeginGetAsset*
  commentId: Overload:Fusee.Base.Common.IAssetProvider.BeginGetAsset
  name: BeginGetAsset
  nameWithType: IAssetProvider.BeginGetAsset
  fullName: Fusee.Base.Common.IAssetProvider.BeginGetAsset
- uid: Fusee.Base.Common.GetCallback
  commentId: T:Fusee.Base.Common.GetCallback
  parent: Fusee.Base.Common
  name: GetCallback
  nameWithType: GetCallback
  fullName: Fusee.Base.Common.GetCallback
- uid: Fusee.Base.Common.IAssetProvider.RegisterTypeHandler*
  commentId: Overload:Fusee.Base.Common.IAssetProvider.RegisterTypeHandler
  name: RegisterTypeHandler
  nameWithType: IAssetProvider.RegisterTypeHandler
  fullName: Fusee.Base.Common.IAssetProvider.RegisterTypeHandler
- uid: Fusee.Base.Common.AssetHandler
  commentId: T:Fusee.Base.Common.AssetHandler
  parent: Fusee.Base.Common
  name: AssetHandler
  nameWithType: AssetHandler
  fullName: Fusee.Base.Common.AssetHandler
