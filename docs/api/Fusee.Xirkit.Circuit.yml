### YamlMime:ManagedReference
items:
- uid: Fusee.Xirkit.Circuit
  commentId: T:Fusee.Xirkit.Circuit
  id: Circuit
  parent: Fusee.Xirkit
  children:
  - Fusee.Xirkit.Circuit.#ctor
  - Fusee.Xirkit.Circuit.AddNode(Fusee.Xirkit.Node)
  - Fusee.Xirkit.Circuit.AddRoot(Fusee.Xirkit.Node)
  - Fusee.Xirkit.Circuit.DeleteNode(System.Int32)
  - Fusee.Xirkit.Circuit.DeleteRoot(System.Int32)
  - Fusee.Xirkit.Circuit.Execute
  - Fusee.Xirkit.Circuit.NodeList
  - Fusee.Xirkit.Circuit.Reset
  - Fusee.Xirkit.Circuit.RootList
  langs:
  - csharp
  - vb
  name: Circuit
  nameWithType: Circuit
  fullName: Fusee.Xirkit.Circuit
  type: Class
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xirkit/Circuit.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Circuit
    path: src/Fusee/src/Xirkit/Circuit.cs
    startLine: 29
  assemblies:
  - Fusee.Xirkit
  namespace: Fusee.Xirkit
  summary: "\nA Circuit contains arbitrary objects. Connections between the objects&apos; members (fields and properties) automatically\nhandle value propagation - if a source value changes, all the connected members will be set to the updated value.\n<p>\nThis is the main object of the Xirkit package. Compare a Circuit to a real electronic circuit with the electronic\ncomponents being instances of objects, their pins welded to the board being instances of <xref href=\"Fusee.Xirkit.IInPin\" data-throw-if-not-resolved=\"false\"></xref> \nand <xref href=\"Fusee.Xirkit.IOutPin\" data-throw-if-not-resolved=\"false\"></xref> connected to each others by conductive paths. Instead of electricity floating along \nthe connections, a Circuit instance transmits values of certain types from node to node. If you are familiar\nwith CINEMA 4D&apos;s XPresso, you know what a Circuit is. You can also compare Xirkit to WPF&apos;s Dependency Properties.\n</p>\n<p>\nTo build up a Circuit in code, create a new Circuit. For each arbitrary object that should be connected in the Circuit,\ncreate a hosting <xref href=\"Fusee.Xirkit.Node\" data-throw-if-not-resolved=\"false\"></xref> instance, passing the participating object to the Node&apos;s constructor. Use\n<xref href=\"Fusee.Xirkit.Circuit.AddNode(Fusee.Xirkit.Node)\" data-throw-if-not-resolved=\"false\"></xref> to add each new node (with the hosted object). Then use <xref href=\"Fusee.Xirkit.Node.Attach(System.String%2cFusee.Xirkit.Node%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> to connect\nmembers (fields and properties) of objects contained in two different nodes to each others. \n</p>\n<p>\nTechnically a Circuit is a container filled with <xref href=\"Fusee.Xirkit.Node\" data-throw-if-not-resolved=\"false\"></xref> instances that are related to each others by connected (in- and out-) pins.\nA number of these nodes are specified as root nodes. Whenever a circuit is executed by calling its <xref href=\"Fusee.Xirkit.Circuit.Execute\" data-throw-if-not-resolved=\"false\"></xref> method,\nthe values of all out-pins at the root nodes are propagated (and possibly converted) the their connected in-pins, \nwhich in turn might trigger subsequent propagation along the graph. Nodes exposing the <xref href=\"Fusee.Xirkit.ICalculationPerformer\" data-throw-if-not-resolved=\"false\"></xref> \ninterface are triggered to perform their calculation before the values at their out-pins are further propagated.\n</p>\n"
  example: []
  syntax:
    content: public class Circuit
    content.vb: Public Class Circuit
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Fusee.Xirkit.Circuit.NodeList
  commentId: P:Fusee.Xirkit.Circuit.NodeList
  id: NodeList
  parent: Fusee.Xirkit.Circuit
  langs:
  - csharp
  - vb
  name: NodeList
  nameWithType: Circuit.NodeList
  fullName: Fusee.Xirkit.Circuit.NodeList
  type: Property
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xirkit/Circuit.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: NodeList
    path: src/Fusee/src/Xirkit/Circuit.cs
    startLine: 40
  assemblies:
  - Fusee.Xirkit
  namespace: Fusee.Xirkit
  summary: "\nGets list of nodes within this Circuit\n"
  example: []
  syntax:
    content: public List<Node> NodeList { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Fusee.Xirkit.Node}
      description: "\nThe node list.\n"
    content.vb: Public ReadOnly Property NodeList As List(Of Node)
  overload: Fusee.Xirkit.Circuit.NodeList*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fusee.Xirkit.Circuit.RootList
  commentId: P:Fusee.Xirkit.Circuit.RootList
  id: RootList
  parent: Fusee.Xirkit.Circuit
  langs:
  - csharp
  - vb
  name: RootList
  nameWithType: Circuit.RootList
  fullName: Fusee.Xirkit.Circuit.RootList
  type: Property
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xirkit/Circuit.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: RootList
    path: src/Fusee/src/Xirkit/Circuit.cs
    startLine: 47
  assemblies:
  - Fusee.Xirkit
  namespace: Fusee.Xirkit
  summary: "\nGets list of root nodes within this Circuit. Each root node should additionally be part of the node list.\n"
  example: []
  syntax:
    content: public List<Node> RootList { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Fusee.Xirkit.Node}
      description: "\nThe root list.\n"
    content.vb: Public ReadOnly Property RootList As List(Of Node)
  overload: Fusee.Xirkit.Circuit.RootList*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Fusee.Xirkit.Circuit.#ctor
  commentId: M:Fusee.Xirkit.Circuit.#ctor
  id: '#ctor'
  parent: Fusee.Xirkit.Circuit
  langs:
  - csharp
  - vb
  name: Circuit()
  nameWithType: Circuit.Circuit()
  fullName: Fusee.Xirkit.Circuit.Circuit()
  type: Constructor
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xirkit/Circuit.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: .ctor
    path: src/Fusee/src/Xirkit/Circuit.cs
    startLine: 52
  assemblies:
  - Fusee.Xirkit
  namespace: Fusee.Xirkit
  summary: "\nInitializes a new instance of the <xref href=\"Fusee.Xirkit.Circuit\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public Circuit()
    content.vb: Public Sub New
  overload: Fusee.Xirkit.Circuit.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fusee.Xirkit.Circuit.AddRoot(Fusee.Xirkit.Node)
  commentId: M:Fusee.Xirkit.Circuit.AddRoot(Fusee.Xirkit.Node)
  id: AddRoot(Fusee.Xirkit.Node)
  parent: Fusee.Xirkit.Circuit
  langs:
  - csharp
  - vb
  name: AddRoot(Node)
  nameWithType: Circuit.AddRoot(Node)
  fullName: Fusee.Xirkit.Circuit.AddRoot(Fusee.Xirkit.Node)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xirkit/Circuit.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: AddRoot
    path: src/Fusee/src/Xirkit/Circuit.cs
    startLine: 65
  assemblies:
  - Fusee.Xirkit
  namespace: Fusee.Xirkit
  summary: "\nAdds a node to list of root nodes. Root nodes are the starting point of the \nvalue propagation when a graph is executed (when its <xref href=\"Fusee.Xirkit.Circuit.Execute\" data-throw-if-not-resolved=\"false\"></xref> method is called).\n"
  example: []
  syntax:
    content: public void AddRoot(Node root)
    parameters:
    - id: root
      type: Fusee.Xirkit.Node
      description: A Node object to be added to the list of root nodes.
    content.vb: Public Sub AddRoot(root As Node)
  overload: Fusee.Xirkit.Circuit.AddRoot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fusee.Xirkit.Circuit.AddNode(Fusee.Xirkit.Node)
  commentId: M:Fusee.Xirkit.Circuit.AddNode(Fusee.Xirkit.Node)
  id: AddNode(Fusee.Xirkit.Node)
  parent: Fusee.Xirkit.Circuit
  langs:
  - csharp
  - vb
  name: AddNode(Node)
  nameWithType: Circuit.AddNode(Node)
  fullName: Fusee.Xirkit.Circuit.AddNode(Fusee.Xirkit.Node)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xirkit/Circuit.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: AddNode
    path: src/Fusee/src/Xirkit/Circuit.cs
    startLine: 75
  assemblies:
  - Fusee.Xirkit
  namespace: Fusee.Xirkit
  summary: "\nAdds node to the circuit. The node only takes part in an execution as long as it is either\nalso listed as a root node or it has in-pins connected to other nodes in the list.\n"
  example: []
  syntax:
    content: public void AddNode(Node node)
    parameters:
    - id: node
      type: Fusee.Xirkit.Node
      description: The node.
    content.vb: Public Sub AddNode(node As Node)
  overload: Fusee.Xirkit.Circuit.AddNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fusee.Xirkit.Circuit.Reset
  commentId: M:Fusee.Xirkit.Circuit.Reset
  id: Reset
  parent: Fusee.Xirkit.Circuit
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: Circuit.Reset()
  fullName: Fusee.Xirkit.Circuit.Reset()
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xirkit/Circuit.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Reset
    path: src/Fusee/src/Xirkit/Circuit.cs
    startLine: 83
  assemblies:
  - Fusee.Xirkit
  namespace: Fusee.Xirkit
  summary: "\nResets all nodes within this circuit.\n"
  example: []
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: Fusee.Xirkit.Circuit.Reset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fusee.Xirkit.Circuit.Execute
  commentId: M:Fusee.Xirkit.Circuit.Execute
  id: Execute
  parent: Fusee.Xirkit.Circuit
  langs:
  - csharp
  - vb
  name: Execute()
  nameWithType: Circuit.Execute()
  fullName: Fusee.Xirkit.Circuit.Execute()
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xirkit/Circuit.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Execute
    path: src/Fusee/src/Xirkit/Circuit.cs
    startLine: 96
  assemblies:
  - Fusee.Xirkit
  namespace: Fusee.Xirkit
  summary: "\nExecutes this circuit. \nPropagates the values of all out-pins at the root nodes to the their connected in-pins. If these nodes have out-pins \nconnected to subsequent nodes&apos; in-pins, their values will be further propagated. Nodes exposing the \n<xref href=\"Fusee.Xirkit.ICalculationPerformer\" data-throw-if-not-resolved=\"false\"></xref> interface are triggered to perform their calculation before \nthe values at their out-pins are further propagated.\n"
  example: []
  syntax:
    content: public void Execute()
    content.vb: Public Sub Execute
  overload: Fusee.Xirkit.Circuit.Execute*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fusee.Xirkit.Circuit.DeleteRoot(System.Int32)
  commentId: M:Fusee.Xirkit.Circuit.DeleteRoot(System.Int32)
  id: DeleteRoot(System.Int32)
  parent: Fusee.Xirkit.Circuit
  langs:
  - csharp
  - vb
  name: DeleteRoot(Int32)
  nameWithType: Circuit.DeleteRoot(Int32)
  fullName: Fusee.Xirkit.Circuit.DeleteRoot(System.Int32)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xirkit/Circuit.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: DeleteRoot
    path: src/Fusee/src/Xirkit/Circuit.cs
    startLine: 107
  assemblies:
  - Fusee.Xirkit
  namespace: Fusee.Xirkit
  summary: "\nThis method is defunct since a user has no idea of what to specify at &quot;pos&quot;.\n"
  example: []
  syntax:
    content: public void DeleteRoot(int pos)
    parameters:
    - id: pos
      type: System.Int32
      description: The position.
    content.vb: Public Sub DeleteRoot(pos As Integer)
  overload: Fusee.Xirkit.Circuit.DeleteRoot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Fusee.Xirkit.Circuit.DeleteNode(System.Int32)
  commentId: M:Fusee.Xirkit.Circuit.DeleteNode(System.Int32)
  id: DeleteNode(System.Int32)
  parent: Fusee.Xirkit.Circuit
  langs:
  - csharp
  - vb
  name: DeleteNode(Int32)
  nameWithType: Circuit.DeleteNode(Int32)
  fullName: Fusee.Xirkit.Circuit.DeleteNode(System.Int32)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xirkit/Circuit.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: DeleteNode
    path: src/Fusee/src/Xirkit/Circuit.cs
    startLine: 118
  assemblies:
  - Fusee.Xirkit
  namespace: Fusee.Xirkit
  summary: "\nThis method is defunct since a user has no idea of what to specify at &quot;pos&quot;.\n"
  example: []
  syntax:
    content: public void DeleteNode(int pos)
    parameters:
    - id: pos
      type: System.Int32
      description: The position.
    content.vb: Public Sub DeleteNode(pos As Integer)
  overload: Fusee.Xirkit.Circuit.DeleteNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Fusee.Xirkit.IInPin
  commentId: T:Fusee.Xirkit.IInPin
  parent: Fusee.Xirkit
  name: IInPin
  nameWithType: IInPin
  fullName: Fusee.Xirkit.IInPin
- uid: Fusee.Xirkit.IOutPin
  commentId: T:Fusee.Xirkit.IOutPin
  parent: Fusee.Xirkit
  name: IOutPin
  nameWithType: IOutPin
  fullName: Fusee.Xirkit.IOutPin
- uid: Fusee.Xirkit.Node
  commentId: T:Fusee.Xirkit.Node
  parent: Fusee.Xirkit
  name: Node
  nameWithType: Node
  fullName: Fusee.Xirkit.Node
- uid: Fusee.Xirkit.Circuit.AddNode(Fusee.Xirkit.Node)
  commentId: M:Fusee.Xirkit.Circuit.AddNode(Fusee.Xirkit.Node)
  isExternal: true
- uid: Fusee.Xirkit.Node.Attach(System.String,Fusee.Xirkit.Node,System.String)
  commentId: M:Fusee.Xirkit.Node.Attach(System.String,Fusee.Xirkit.Node,System.String)
  isExternal: true
- uid: Fusee.Xirkit.Circuit.Execute
  commentId: M:Fusee.Xirkit.Circuit.Execute
  isExternal: true
- uid: Fusee.Xirkit.ICalculationPerformer
  commentId: T:Fusee.Xirkit.ICalculationPerformer
  name: ICalculationPerformer
  nameWithType: ICalculationPerformer
  fullName: Fusee.Xirkit.ICalculationPerformer
- uid: Fusee.Xirkit
  commentId: N:Fusee.Xirkit
  name: Fusee.Xirkit
  nameWithType: Fusee.Xirkit
  fullName: Fusee.Xirkit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fusee.Xirkit.Circuit.NodeList*
  commentId: Overload:Fusee.Xirkit.Circuit.NodeList
  name: NodeList
  nameWithType: Circuit.NodeList
  fullName: Fusee.Xirkit.Circuit.NodeList
- uid: System.Collections.Generic.List{Fusee.Xirkit.Node}
  commentId: T:System.Collections.Generic.List{Fusee.Xirkit.Node}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Node>
  nameWithType: List<Node>
  fullName: System.Collections.Generic.List<Fusee.Xirkit.Node>
  nameWithType.vb: List(Of Node)
  fullName.vb: System.Collections.Generic.List(Of Fusee.Xirkit.Node)
  name.vb: List(Of Node)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Fusee.Xirkit.Node
    name: Node
    nameWithType: Node
    fullName: Fusee.Xirkit.Node
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Fusee.Xirkit.Node
    name: Node
    nameWithType: Node
    fullName: Fusee.Xirkit.Node
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Fusee.Xirkit.Circuit.RootList*
  commentId: Overload:Fusee.Xirkit.Circuit.RootList
  name: RootList
  nameWithType: Circuit.RootList
  fullName: Fusee.Xirkit.Circuit.RootList
- uid: Fusee.Xirkit.Circuit
  commentId: T:Fusee.Xirkit.Circuit
  name: Circuit
  nameWithType: Circuit
  fullName: Fusee.Xirkit.Circuit
- uid: Fusee.Xirkit.Circuit.#ctor*
  commentId: Overload:Fusee.Xirkit.Circuit.#ctor
  name: Circuit
  nameWithType: Circuit.Circuit
  fullName: Fusee.Xirkit.Circuit.Circuit
- uid: Fusee.Xirkit.Circuit.AddRoot*
  commentId: Overload:Fusee.Xirkit.Circuit.AddRoot
  name: AddRoot
  nameWithType: Circuit.AddRoot
  fullName: Fusee.Xirkit.Circuit.AddRoot
- uid: Fusee.Xirkit.Circuit.AddNode*
  commentId: Overload:Fusee.Xirkit.Circuit.AddNode
  name: AddNode
  nameWithType: Circuit.AddNode
  fullName: Fusee.Xirkit.Circuit.AddNode
- uid: Fusee.Xirkit.Circuit.Reset*
  commentId: Overload:Fusee.Xirkit.Circuit.Reset
  name: Reset
  nameWithType: Circuit.Reset
  fullName: Fusee.Xirkit.Circuit.Reset
- uid: Fusee.Xirkit.Circuit.Execute*
  commentId: Overload:Fusee.Xirkit.Circuit.Execute
  name: Execute
  nameWithType: Circuit.Execute
  fullName: Fusee.Xirkit.Circuit.Execute
- uid: Fusee.Xirkit.Circuit.DeleteRoot*
  commentId: Overload:Fusee.Xirkit.Circuit.DeleteRoot
  name: DeleteRoot
  nameWithType: Circuit.DeleteRoot
  fullName: Fusee.Xirkit.Circuit.DeleteRoot
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Fusee.Xirkit.Circuit.DeleteNode*
  commentId: Overload:Fusee.Xirkit.Circuit.DeleteNode
  name: DeleteNode
  nameWithType: Circuit.DeleteNode
  fullName: Fusee.Xirkit.Circuit.DeleteNode
