### YamlMime:ManagedReference
items:
- uid: Fusee.Xene.VisitorHelpers
  commentId: T:Fusee.Xene.VisitorHelpers
  id: VisitorHelpers
  parent: Fusee.Xene
  children:
  - Fusee.Xene.VisitorHelpers.SingleRootEnumerable``1(``0)
  - Fusee.Xene.VisitorHelpers.SingleRootEnumerator``1(``0)
  langs:
  - csharp
  - vb
  name: VisitorHelpers
  nameWithType: VisitorHelpers
  fullName: Fusee.Xene.VisitorHelpers
  type: Class
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xene/Visitor.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: VisitorHelpers
    path: src/Fusee/src/Xene/Visitor.cs
    startLine: 22
  assemblies:
  - Fusee.Xene
  namespace: Fusee.Xene
  summary: "\nStatic class containing helper methods around the Visitor\n"
  example: []
  syntax:
    content: public static class VisitorHelpers
    content.vb: Public Module VisitorHelpers
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Fusee.Xene.VisitorHelpers.SingleRootEnumerator``1(``0)
  commentId: M:Fusee.Xene.VisitorHelpers.SingleRootEnumerator``1(``0)
  id: SingleRootEnumerator``1(``0)
  parent: Fusee.Xene.VisitorHelpers
  langs:
  - csharp
  - vb
  name: SingleRootEnumerator<TNode>(TNode)
  nameWithType: VisitorHelpers.SingleRootEnumerator<TNode>(TNode)
  fullName: Fusee.Xene.VisitorHelpers.SingleRootEnumerator<TNode>(TNode)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xene/Visitor.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: SingleRootEnumerator
    path: src/Fusee/src/Xene/Visitor.cs
    startLine: 31
  assemblies:
  - Fusee.Xene
  namespace: Fusee.Xene
  summary: "\nReturns an enumerator enumerating only one item: the root parameter passed.\nThis method can be used in situations where an IEnumerator is required (as a method argument)\nbut only one single node needs to be passed.\n"
  example: []
  syntax:
    content: public static IEnumerator<TNode> SingleRootEnumerator<TNode>(TNode root)
    parameters:
    - id: root
      type: '{TNode}'
      description: The root to enumerate.
    typeParameters:
    - id: TNode
    return:
      type: System.Collections.Generic.IEnumerator{{TNode}}
      description: 'An enumerator yielding only one element: the node passed as root.'
    content.vb: Public Shared Function SingleRootEnumerator(Of TNode)(root As TNode) As IEnumerator(Of TNode)
  overload: Fusee.Xene.VisitorHelpers.SingleRootEnumerator*
  nameWithType.vb: VisitorHelpers.SingleRootEnumerator(Of TNode)(TNode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Fusee.Xene.VisitorHelpers.SingleRootEnumerator(Of TNode)(TNode)
  name.vb: SingleRootEnumerator(Of TNode)(TNode)
- uid: Fusee.Xene.VisitorHelpers.SingleRootEnumerable``1(``0)
  commentId: M:Fusee.Xene.VisitorHelpers.SingleRootEnumerable``1(``0)
  id: SingleRootEnumerable``1(``0)
  parent: Fusee.Xene.VisitorHelpers
  langs:
  - csharp
  - vb
  name: SingleRootEnumerable<TNode>(TNode)
  nameWithType: VisitorHelpers.SingleRootEnumerable<TNode>(TNode)
  fullName: Fusee.Xene.VisitorHelpers.SingleRootEnumerable<TNode>(TNode)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Xene/Visitor.cs
      branch: master
      repo: https://github.com/FUSEEProjectTeam/WebsiteTest.git
    id: SingleRootEnumerable
    path: src/Fusee/src/Xene/Visitor.cs
    startLine: 43
  assemblies:
  - Fusee.Xene
  namespace: Fusee.Xene
  summary: "\nReturns an enumerable enumerating only one item: the root parameter passed.\nThis method can be used in situations where an IEnumerator is required (as a method argument)\nbut only one single node needs to be passed.\n"
  example: []
  syntax:
    content: public static IEnumerable<TNode> SingleRootEnumerable<TNode>(TNode root)
    parameters:
    - id: root
      type: '{TNode}'
      description: The root to enumerate.
    typeParameters:
    - id: TNode
    return:
      type: System.Collections.Generic.IEnumerable{{TNode}}
      description: 'An enumerable yielding only one element: the node passed as root.'
    content.vb: Public Shared Function SingleRootEnumerable(Of TNode)(root As TNode) As IEnumerable(Of TNode)
  overload: Fusee.Xene.VisitorHelpers.SingleRootEnumerable*
  nameWithType.vb: VisitorHelpers.SingleRootEnumerable(Of TNode)(TNode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Fusee.Xene.VisitorHelpers.SingleRootEnumerable(Of TNode)(TNode)
  name.vb: SingleRootEnumerable(Of TNode)(TNode)
references:
- uid: Fusee.Xene
  commentId: N:Fusee.Xene
  name: Fusee.Xene
  nameWithType: Fusee.Xene
  fullName: Fusee.Xene
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Fusee.Xene.VisitorHelpers.SingleRootEnumerator*
  commentId: Overload:Fusee.Xene.VisitorHelpers.SingleRootEnumerator
  name: SingleRootEnumerator
  nameWithType: VisitorHelpers.SingleRootEnumerator
  fullName: Fusee.Xene.VisitorHelpers.SingleRootEnumerator
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: System.Collections.Generic.IEnumerator{{TNode}}
  commentId: T:System.Collections.Generic.IEnumerator{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<TNode>
  nameWithType: IEnumerator<TNode>
  fullName: System.Collections.Generic.IEnumerator<TNode>
  nameWithType.vb: IEnumerator(Of TNode)
  fullName.vb: System.Collections.Generic.IEnumerator(Of TNode)
  name.vb: IEnumerator(Of TNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Fusee.Xene.VisitorHelpers.SingleRootEnumerable*
  commentId: Overload:Fusee.Xene.VisitorHelpers.SingleRootEnumerable
  name: SingleRootEnumerable
  nameWithType: VisitorHelpers.SingleRootEnumerable
  fullName: Fusee.Xene.VisitorHelpers.SingleRootEnumerable
- uid: System.Collections.Generic.IEnumerable{{TNode}}
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TNode>
  nameWithType: IEnumerable<TNode>
  fullName: System.Collections.Generic.IEnumerable<TNode>
  nameWithType.vb: IEnumerable(Of TNode)
  fullName.vb: System.Collections.Generic.IEnumerable(Of TNode)
  name.vb: IEnumerable(Of TNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
