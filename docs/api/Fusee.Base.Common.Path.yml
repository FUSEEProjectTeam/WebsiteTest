### YamlMime:ManagedReference
items:
- uid: Fusee.Base.Common.Path
  commentId: T:Fusee.Base.Common.Path
  id: Path
  parent: Fusee.Base.Common
  children:
  - Fusee.Base.Common.Path.AltDirectorySeparatorChar
  - Fusee.Base.Common.Path.ChangeExtension(System.String,System.String)
  - Fusee.Base.Common.Path.Combine(System.String,System.String)
  - Fusee.Base.Common.Path.Combine(System.String,System.String,System.String)
  - Fusee.Base.Common.Path.Combine(System.String,System.String,System.String,System.String)
  - Fusee.Base.Common.Path.Combine(System.String[])
  - Fusee.Base.Common.Path.DirectorySeparatorChar
  - Fusee.Base.Common.Path.GetDirectoryName(System.String)
  - Fusee.Base.Common.Path.GetExtension(System.String)
  - Fusee.Base.Common.Path.GetFileName(System.String)
  - Fusee.Base.Common.Path.GetFileNameWithoutExtension(System.String)
  - Fusee.Base.Common.Path.GetInvalidFileNameChars
  - Fusee.Base.Common.Path.GetInvalidPathChars
  - Fusee.Base.Common.Path.GetPathRoot(System.String)
  - Fusee.Base.Common.Path.HasExtension(System.String)
  - Fusee.Base.Common.Path.IsPathRooted(System.String)
  - Fusee.Base.Common.Path.PathSeparator
  - Fusee.Base.Common.Path.VolumeSeparatorChar
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: Path
  fullName: Fusee.Base.Common.Path
  type: Class
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Path
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 9
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nMethods to perform various operations on strings resembling file paths.\n"
  example: []
  syntax:
    content: public static class Path
    content.vb: Public Module Path
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Fusee.Base.Common.Path.AltDirectorySeparatorChar
  commentId: F:Fusee.Base.Common.Path.AltDirectorySeparatorChar
  id: AltDirectorySeparatorChar
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: AltDirectorySeparatorChar
  nameWithType: Path.AltDirectorySeparatorChar
  fullName: Fusee.Base.Common.Path.AltDirectorySeparatorChar
  type: Field
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: AltDirectorySeparatorChar
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 16
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nThe alternative directory separator character (&apos;/&apos; on windows).\n"
  example: []
  syntax:
    content: public static readonly char AltDirectorySeparatorChar
    return:
      type: System.Char
    content.vb: Public Shared ReadOnly AltDirectorySeparatorChar As Char
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Fusee.Base.Common.Path.DirectorySeparatorChar
  commentId: F:Fusee.Base.Common.Path.DirectorySeparatorChar
  id: DirectorySeparatorChar
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: DirectorySeparatorChar
  nameWithType: Path.DirectorySeparatorChar
  fullName: Fusee.Base.Common.Path.DirectorySeparatorChar
  type: Field
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: DirectorySeparatorChar
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 21
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nThe directory separator character (&apos;\\&apos; on windows, &apos;/&apos; on most other platforms).\n"
  example: []
  syntax:
    content: public static readonly char DirectorySeparatorChar
    return:
      type: System.Char
    content.vb: Public Shared ReadOnly DirectorySeparatorChar As Char
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Fusee.Base.Common.Path.PathSeparator
  commentId: F:Fusee.Base.Common.Path.PathSeparator
  id: PathSeparator
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: PathSeparator
  nameWithType: Path.PathSeparator
  fullName: Fusee.Base.Common.Path.PathSeparator
  type: Field
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: PathSeparator
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 26
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nThe path separator character (&apos;;&apos; on most platforms)\n"
  example: []
  syntax:
    content: public static readonly char PathSeparator
    return:
      type: System.Char
    content.vb: Public Shared ReadOnly PathSeparator As Char
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Fusee.Base.Common.Path.VolumeSeparatorChar
  commentId: F:Fusee.Base.Common.Path.VolumeSeparatorChar
  id: VolumeSeparatorChar
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: VolumeSeparatorChar
  nameWithType: Path.VolumeSeparatorChar
  fullName: Fusee.Base.Common.Path.VolumeSeparatorChar
  type: Field
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: VolumeSeparatorChar
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 36
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nThe volume separator character (&apos;:&apos; on windows).\n"
  example: []
  syntax:
    content: public static readonly char VolumeSeparatorChar
    return:
      type: System.Char
    content.vb: Public Shared ReadOnly VolumeSeparatorChar As Char
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Fusee.Base.Common.Path.ChangeExtension(System.String,System.String)
  commentId: M:Fusee.Base.Common.Path.ChangeExtension(System.String,System.String)
  id: ChangeExtension(System.String,System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: ChangeExtension(String, String)
  nameWithType: Path.ChangeExtension(String, String)
  fullName: Fusee.Base.Common.Path.ChangeExtension(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: ChangeExtension
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 48
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nChanges the file extension (&quot;.txt&quot;) of a path.\n"
  example: []
  syntax:
    content: public static string ChangeExtension(string path, string extension)
    parameters:
    - id: path
      type: System.String
      description: The path.
    - id: extension
      type: System.String
      description: The extension.
    return:
      type: System.String
      description: The path with the exchanged file extension.
    content.vb: Public Shared Function ChangeExtension(path As String, extension As String) As String
  overload: Fusee.Base.Common.Path.ChangeExtension*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Illegal characters in path.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.Combine(System.String,System.String)
  commentId: M:Fusee.Base.Common.Path.Combine(System.String,System.String)
  id: Combine(System.String,System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: Combine(String, String)
  nameWithType: Path.Combine(String, String)
  fullName: Fusee.Base.Common.Path.Combine(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Combine
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 100
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nCombines two paths. Considers potential trailing directory separators.\n"
  example: []
  syntax:
    content: public static string Combine(string path1, string path2)
    parameters:
    - id: path1
      type: System.String
      description: 'Path #1. Leftmost part of the result.'
    - id: path2
      type: System.String
      description: 'Path #2. Rightmost part of the result.'
    return:
      type: System.String
      description: The combined path.
    content.vb: Public Shared Function Combine(path1 As String, path2 As String) As String
  overload: Fusee.Base.Common.Path.Combine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\npath1\nor\npath2\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIllegal characters in path.\nor\nIllegal characters in path.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.GetDirectoryName(System.String)
  commentId: M:Fusee.Base.Common.Path.GetDirectoryName(System.String)
  id: GetDirectoryName(System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: GetDirectoryName(String)
  nameWithType: Path.GetDirectoryName(String)
  fullName: Fusee.Base.Common.Path.GetDirectoryName(System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: GetDirectoryName
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 212
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nExtracts the directory name from a given path (which is potentially a path to a file).\n"
  example: []
  syntax:
    content: public static string GetDirectoryName(string path)
    parameters:
    - id: path
      type: System.String
      description: The path to extract the directory name from.
    return:
      type: System.String
      description: The directory name.
    content.vb: Public Shared Function GetDirectoryName(path As String) As String
  overload: Fusee.Base.Common.Path.GetDirectoryName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nInvalid path\nor\nArgument string consists of whitespace characters only.\nor\nPath contains invalid characters\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.GetExtension(System.String)
  commentId: M:Fusee.Base.Common.Path.GetExtension(System.String)
  id: GetExtension(System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: GetExtension(String)
  nameWithType: Path.GetExtension(String)
  fullName: Fusee.Base.Common.Path.GetExtension(System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: GetExtension
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 258
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nRetrieves the file extension (e.g. &quot;.txt&quot;) from a given path.\n"
  example: []
  syntax:
    content: public static string GetExtension(string path)
    parameters:
    - id: path
      type: System.String
      description: The path to get the extension from.
    return:
      type: System.String
      description: The extension.
    content.vb: Public Shared Function GetExtension(path As String) As String
  overload: Fusee.Base.Common.Path.GetExtension*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Illegal characters in path.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.GetFileName(System.String)
  commentId: M:Fusee.Base.Common.Path.GetFileName(System.String)
  id: GetFileName(System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: GetFileName(String)
  nameWithType: Path.GetFileName(String)
  fullName: Fusee.Base.Common.Path.GetFileName(System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: GetFileName
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 282
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nRetrieves a file name from the given path.\n"
  example: []
  syntax:
    content: public static string GetFileName(string path)
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.String
      description: The file name
    content.vb: Public Shared Function GetFileName(path As String) As String
  overload: Fusee.Base.Common.Path.GetFileName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Illegal characters in path.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.GetFileNameWithoutExtension(System.String)
  commentId: M:Fusee.Base.Common.Path.GetFileNameWithoutExtension(System.String)
  id: GetFileNameWithoutExtension(System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: GetFileNameWithoutExtension(String)
  nameWithType: Path.GetFileNameWithoutExtension(String)
  fullName: Fusee.Base.Common.Path.GetFileNameWithoutExtension(System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: GetFileNameWithoutExtension
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 302
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nRetrieves the file name without extension from a given path.\n"
  example: []
  syntax:
    content: public static string GetFileNameWithoutExtension(string path)
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.String
      description: The file name without extension.
    content.vb: Public Shared Function GetFileNameWithoutExtension(path As String) As String
  overload: Fusee.Base.Common.Path.GetFileNameWithoutExtension*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.GetPathRoot(System.String)
  commentId: M:Fusee.Base.Common.Path.GetPathRoot(System.String)
  id: GetPathRoot(System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: GetPathRoot(String)
  nameWithType: Path.GetPathRoot(String)
  fullName: Fusee.Base.Common.Path.GetPathRoot(System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: GetPathRoot
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 320
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nRetrieves the path root from a given path.\n"
  example: []
  syntax:
    content: public static string GetPathRoot(string path)
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.String
      description: The path root.
    content.vb: Public Shared Function GetPathRoot(path As String) As String
  overload: Fusee.Base.Common.Path.GetPathRoot*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The specified path is not of a legal form.
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: 'return Directory.GetCurrentDirectory().Substring(0, 2); '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.HasExtension(System.String)
  commentId: M:Fusee.Base.Common.Path.HasExtension(System.String)
  id: HasExtension(System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: HasExtension(String)
  nameWithType: Path.HasExtension(String)
  fullName: Fusee.Base.Common.Path.HasExtension(System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: HasExtension
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 382
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nDetermines whether the specified path has an extension.\n"
  example: []
  syntax:
    content: public static bool HasExtension(string path)
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.Boolean
      description: true if the path has an extension, otherwise false.
    content.vb: Public Shared Function HasExtension(path As String) As Boolean
  overload: Fusee.Base.Common.Path.HasExtension*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Illegal characters in path.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.IsPathRooted(System.String)
  commentId: M:Fusee.Base.Common.Path.IsPathRooted(System.String)
  id: IsPathRooted(System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: IsPathRooted(String)
  nameWithType: Path.IsPathRooted(String)
  fullName: Fusee.Base.Common.Path.IsPathRooted(System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: IsPathRooted
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 400
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nDetermines whether the specified path has a root.\n"
  example: []
  syntax:
    content: public static bool IsPathRooted(string path)
    parameters:
    - id: path
      type: System.String
      description: The path.
    return:
      type: System.Boolean
      description: true if the path has a root, otherwise false.
    content.vb: Public Shared Function IsPathRooted(path As String) As Boolean
  overload: Fusee.Base.Common.Path.IsPathRooted*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Illegal characters in path.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.GetInvalidFileNameChars
  commentId: M:Fusee.Base.Common.Path.GetInvalidFileNameChars
  id: GetInvalidFileNameChars
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: GetInvalidFileNameChars()
  nameWithType: Path.GetInvalidFileNameChars()
  fullName: Fusee.Base.Common.Path.GetInvalidFileNameChars()
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: GetInvalidFileNameChars
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 418
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nGets the invalid file name chars.\n"
  example: []
  syntax:
    content: public static char[] GetInvalidFileNameChars()
    return:
      type: System.Char[]
      description: An array containing characters that must NOT be used in file names
    content.vb: Public Shared Function GetInvalidFileNameChars As Char()
  overload: Fusee.Base.Common.Path.GetInvalidFileNameChars*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.GetInvalidPathChars
  commentId: M:Fusee.Base.Common.Path.GetInvalidPathChars
  id: GetInvalidPathChars
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: GetInvalidPathChars()
  nameWithType: Path.GetInvalidPathChars()
  fullName: Fusee.Base.Common.Path.GetInvalidPathChars()
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: GetInvalidPathChars
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 437
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nGets the invalid path chars.\n"
  example: []
  syntax:
    content: public static char[] GetInvalidPathChars()
    return:
      type: System.Char[]
      description: An array containing characters that must NOT be used in path names
    content.vb: Public Shared Function GetInvalidPathChars As Char()
  overload: Fusee.Base.Common.Path.GetInvalidPathChars*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.Combine(System.String[])
  commentId: M:Fusee.Base.Common.Path.Combine(System.String[])
  id: Combine(System.String[])
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: Combine(String[])
  nameWithType: Path.Combine(String[])
  fullName: Fusee.Base.Common.Path.Combine(System.String[])
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Combine
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 570
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nCombines an arbitrary number of paths. Considers potential trailing directory separators.\n"
  example: []
  syntax:
    content: public static string Combine(params string[] paths)
    parameters:
    - id: paths
      type: System.String[]
      description: The paths.
    return:
      type: System.String
      description: The combined path.
    content.vb: Public Shared Function Combine(ParamArray paths As String()) As String
  overload: Fusee.Base.Common.Path.Combine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\npaths  or  one of the paths contains a null value\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Illegal characters in path.
  nameWithType.vb: Path.Combine(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Fusee.Base.Common.Path.Combine(System.String())
  name.vb: Combine(String())
- uid: Fusee.Base.Common.Path.Combine(System.String,System.String,System.String)
  commentId: M:Fusee.Base.Common.Path.Combine(System.String,System.String,System.String)
  id: Combine(System.String,System.String,System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: Combine(String, String, String)
  nameWithType: Path.Combine(String, String, String)
  fullName: Fusee.Base.Common.Path.Combine(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Combine
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 637
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nCombines three paths. Considers potential trailing directory separators.\n"
  example: []
  syntax:
    content: public static string Combine(string path1, string path2, string path3)
    parameters:
    - id: path1
      type: System.String
      description: 'Path #1. Leftmost part of the result.'
    - id: path2
      type: System.String
      description: 'Path #2.'
    - id: path3
      type: System.String
      description: 'Path #3. Rightmost part of the result.'
    return:
      type: System.String
      description: The combined path.
    content.vb: Public Shared Function Combine(path1 As String, path2 As String, path3 As String) As String
  overload: Fusee.Base.Common.Path.Combine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\npath1\nor\npath2\nor\npath3\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\nIllegal characters in path1.\nor\nIllegal characters in path2.\nor\nIllegal characters in path3.\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Fusee.Base.Common.Path.Combine(System.String,System.String,System.String,System.String)
  commentId: M:Fusee.Base.Common.Path.Combine(System.String,System.String,System.String,System.String)
  id: Combine(System.String,System.String,System.String,System.String)
  parent: Fusee.Base.Common.Path
  langs:
  - csharp
  - vb
  name: Combine(String, String, String, String)
  nameWithType: Path.Combine(String, String, String, String)
  fullName: Fusee.Base.Common.Path.Combine(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/DocFX/src/Fusee/src/Base/Common/Path.cs
      branch: master
      repo: git@github.com:FUSEEProjectTeam/WebsiteTest.git
    id: Combine
    path: src/Fusee/src/Base/Common/Path.cs
    startLine: 668
  assemblies:
  - Fusee.Base.Common
  namespace: Fusee.Base.Common
  summary: "\nCombines three paths. Considers potential trailing directory separators.\n"
  example: []
  syntax:
    content: public static string Combine(string path1, string path2, string path3, string path4)
    parameters:
    - id: path1
      type: System.String
      description: 'Path #1. Leftmost part of the result.'
    - id: path2
      type: System.String
      description: 'Path #2.'
    - id: path3
      type: System.String
      description: 'Path #3.'
    - id: path4
      type: System.String
      description: 'Path #4. Rightmost part of the result.'
    return:
      type: System.String
      description: The combined path.
    content.vb: Public Shared Function Combine(path1 As String, path2 As String, path3 As String, path4 As String) As String
  overload: Fusee.Base.Common.Path.Combine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\npath1\nor\npath2\nor\npath3\nor\npath4\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Fusee.Base.Common
  commentId: N:Fusee.Base.Common
  name: Fusee.Base.Common
  nameWithType: Fusee.Base.Common
  fullName: Fusee.Base.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Fusee.Base.Common.Path.ChangeExtension*
  commentId: Overload:Fusee.Base.Common.Path.ChangeExtension
  name: ChangeExtension
  nameWithType: Path.ChangeExtension
  fullName: Fusee.Base.Common.Path.ChangeExtension
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Fusee.Base.Common.Path.Combine*
  commentId: Overload:Fusee.Base.Common.Path.Combine
  name: Combine
  nameWithType: Path.Combine
  fullName: Fusee.Base.Common.Path.Combine
- uid: Fusee.Base.Common.Path.GetDirectoryName*
  commentId: Overload:Fusee.Base.Common.Path.GetDirectoryName
  name: GetDirectoryName
  nameWithType: Path.GetDirectoryName
  fullName: Fusee.Base.Common.Path.GetDirectoryName
- uid: Fusee.Base.Common.Path.GetExtension*
  commentId: Overload:Fusee.Base.Common.Path.GetExtension
  name: GetExtension
  nameWithType: Path.GetExtension
  fullName: Fusee.Base.Common.Path.GetExtension
- uid: Fusee.Base.Common.Path.GetFileName*
  commentId: Overload:Fusee.Base.Common.Path.GetFileName
  name: GetFileName
  nameWithType: Path.GetFileName
  fullName: Fusee.Base.Common.Path.GetFileName
- uid: Fusee.Base.Common.Path.GetFileNameWithoutExtension*
  commentId: Overload:Fusee.Base.Common.Path.GetFileNameWithoutExtension
  name: GetFileNameWithoutExtension
  nameWithType: Path.GetFileNameWithoutExtension
  fullName: Fusee.Base.Common.Path.GetFileNameWithoutExtension
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: true
- uid: Fusee.Base.Common.Path.GetPathRoot*
  commentId: Overload:Fusee.Base.Common.Path.GetPathRoot
  name: GetPathRoot
  nameWithType: Path.GetPathRoot
  fullName: Fusee.Base.Common.Path.GetPathRoot
- uid: Fusee.Base.Common.Path.HasExtension*
  commentId: Overload:Fusee.Base.Common.Path.HasExtension
  name: HasExtension
  nameWithType: Path.HasExtension
  fullName: Fusee.Base.Common.Path.HasExtension
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Fusee.Base.Common.Path.IsPathRooted*
  commentId: Overload:Fusee.Base.Common.Path.IsPathRooted
  name: IsPathRooted
  nameWithType: Path.IsPathRooted
  fullName: Fusee.Base.Common.Path.IsPathRooted
- uid: Fusee.Base.Common.Path.GetInvalidFileNameChars*
  commentId: Overload:Fusee.Base.Common.Path.GetInvalidFileNameChars
  name: GetInvalidFileNameChars
  nameWithType: Path.GetInvalidFileNameChars
  fullName: Fusee.Base.Common.Path.GetInvalidFileNameChars
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Fusee.Base.Common.Path.GetInvalidPathChars*
  commentId: Overload:Fusee.Base.Common.Path.GetInvalidPathChars
  name: GetInvalidPathChars
  nameWithType: Path.GetInvalidPathChars
  fullName: Fusee.Base.Common.Path.GetInvalidPathChars
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
